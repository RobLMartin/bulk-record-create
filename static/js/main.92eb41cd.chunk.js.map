{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","data1","data2","data3","data","setData","form","setForm","costCenter","setCostCenter","handleChange","index","change","record","newData","percentage","reduce","a","b","Container","DataEdit","Data","Typography","Edit","TextField","label","name","value","onChange","e","target","type","email","parseInt","nickname","Button","color","variant","onClick","moreData","split","map","cc","generate","disabled","Table","RowContainer","d","key","Row","edit","setEdit","styled","div","Paper","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92eb41cd.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\nimport styled from \"styled-components\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Paper from \"@material-ui/core/Paper\";\n\nfunction App() {\n  const budget = 10000;\n  const [data, setData] = useState([\n    { data1: \"Cost Center\", data2: 10, data3: \"some data\" },\n    { data1: \"Another one\", data2: 20, data3: \"some data\" },\n    { data1: \"Another CC\", data2: 30, data3: \"some data\" }\n  ]);\n  const [form, setForm] = useState({ data1: \"\", data2: 0, data3: \"\" });\n  const [costCenter, setCostCenter] = useState(\"\");\n  const generate = () => {\n    const costCenters = costCenter.split(\",\");\n\n    const moreData = costCenters.map(cc => ({ ...form, data1: cc }));\n\n    setData([...data, ...moreData]);\n  };\n\n  const handleChange = (index, change) => {\n    const record = { ...data[index], ...change };\n    const newData = [...data];\n\n    newData[index] = record;\n\n    setData(newData);\n  };\n\n  const percentage = data.reduce((a, b) => a + (b[\"data2\"] || 0), 0);\n  return (\n    <Container>\n      <DataEdit>\n        <Data>\n          <Typography>Some Line Item</Typography>\n          <Typography>Value: ${budget}</Typography>\n          <Typography>Current Percentage: {percentage}%</Typography>\n          {percentage > 100 && (\n            <Typography>\n              You are {percentage - 100}% over value or {\" $\"}\n              {budget * (percentage / 100) - budget}.\n            </Typography>\n          )}\n        </Data>\n        <Edit>\n          <TextField\n            label=\"Cost Center\"\n            name=\"costCenter\"\n            value={costCenter}\n            onChange={e => setCostCenter(e.target.value)}\n          />\n          <TextField\n            label=\"data2\"\n            name=\"data2\"\n            type=\"number\"\n            value={form.email}\n            onChange={e =>\n              setForm({\n                ...form,\n                [e.target.name]: parseInt(e.target.value)\n              })\n            }\n          />\n          <TextField\n            label=\"data3\"\n            name=\"data3\"\n            value={form.nickname}\n            onChange={e =>\n              setForm({ ...form, [e.target.name]: e.target.value })\n            }\n          />\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            onClick={() => generate()}\n            disabled={!form.data2 || !form.data3 || !costCenter}\n          >\n            Generate\n          </Button>\n        </Edit>\n      </DataEdit>\n      <Table>\n        <RowContainer>\n          <Typography>\n            <strong>Cost Center</strong>\n          </Typography>\n          <Typography>\n            <strong>Other Data</strong>\n          </Typography>\n          <Typography>\n            <strong>Other Data</strong>\n          </Typography>\n        </RowContainer>\n        {data.map((d, index) => (\n          <Row key={index} index={index} {...d} onChange={handleChange} />\n        ))}\n      </Table>\n    </Container>\n  );\n}\n\nexport default App;\n\nconst Row = ({ data1, data2, data3, onChange, index }) => {\n  const [edit, setEdit] = useState(false);\n\n  if (edit) {\n    return (\n      <RowContainer>\n        <TextField\n          label=\"data1\"\n          name=\"data1\"\n          value={data1}\n          onChange={e => onChange(index, { [e.target.name]: e.target.value })}\n        />\n        <TextField\n          label=\"data2\"\n          name=\"data2\"\n          type=\"number\"\n          value={data2}\n          onChange={e =>\n            onChange(index, { [e.target.name]: parseInt(e.target.value) })\n          }\n        />\n        <TextField\n          label=\"data3\"\n          name=\"data3\"\n          value={data3}\n          onChange={e => onChange(index, { [e.target.name]: e.target.value })}\n        />\n        <Button onClick={() => setEdit(false)}>Save</Button>\n      </RowContainer>\n    );\n  }\n\n  return (\n    <RowContainer>\n      <Typography>\n        <a onClick={() => setEdit(true)}>{data1}</a>\n      </Typography>\n      <Typography>\n        <a onClick={() => setEdit(true)}>{data2}</a>\n      </Typography>\n      <Typography>\n        <a onClick={() => setEdit(true)}>{data3}</a>\n      </Typography>\n    </RowContainer>\n  );\n};\n\nconst RowContainer = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  border-bottom: solid 1px lightgrey;\n  align-items: center;\n  padding: 0.2em;\n`;\n\nconst Table = styled(Paper)`\n  display: grid;\n  width: 500px;\n  height: fit-content;\n`;\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr;\n  grid-gap: 1em;\n  width: 100%;\n  padding: 2em;\n  background-color: aliceblue;\n  height: 100vh;\n  overflow-y: scroll;\n`;\n\nconst Edit = styled(Paper)`\n  padding: 1em;\n  width: 500px;\n  display: grid;\n  grid-gap: 1em;\n  height: fit-content;\n`;\n\nconst Data = styled(Paper)`\n  padding: 1em;\n  display: grid;\n  grid-gap: 1em;\n  max-height: 300px;\n  height: fit-content;\n  text-align: left;\n`;\n\nconst DataEdit = styled.div`\n  display: grid;\n  grid-gap: 1em;\n  height: fit-content;\n`;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}